#!/bin/sh
#
# Copyright 2012 Todd Brandt <tebrandt@frontier.com>
#
# This program is free software; you may redistribute it and/or modify it
# under the GNU GPL license.
#
#    Webcam manager utility for launching and monitoring mjpg instances
#    Copyright (C) 2012 Todd Brandt <tebrandt@frontier.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

if [ -e "/var/lock/webcam" ]; then
	echo "Another webcam-manager is already running"
	exit
fi
touch "/var/lock/webcam"

if [ $# -gt 3 ]; then
	echo "USAGE: webcam-manager [--singlestream] [--waitfordevs <numdevs>]"
	exit
fi

DAEMON="/usr/bin/mjpg_streamer"
VIDARGS="-r 1280x720 -f 12"
# multi: run as many mjpg_streamers as there are camera devices
STREAM="multi"
WAIT=0

while [ "$1" ] ; do
	if [ "$1" = "--singlestream" ]; then
		# single: run a single mjpg_streamer multiplexing all cameras
		STREAM="single"
	elif [ "$1" = "--waitfordevs" ]; then
		shift
		if [ "$1" ]; then
			WAIT=`expr $1`
		else
			echo "ERROR: --waitfordevs missing argument"
			exit
		fi
	else
		echo "What the hell is this? -> $1"
		echo "USAGE: webcam-manager [--singlestream] [--waitfordevs <numdevs>]"
		exit
	fi
	shift
done

if [ $WAIT -gt 0 ]; then
	let WAIT=WAIT-1
	for i in `seq 0 $WAIT`; do
		while [ ! -e "/dev/video$i" ]; do
			sleep 1
		done
	done
fi

if [ $STREAM = "multi" ]; then
	while [ 1 ]; do
		DEVICES=`ls -1 /dev/video?`
		PIDS=""
		for d in $DEVICES;
		do
			NUM=`echo $d | sed "s/[a-z,/]//g"`
			PORT="809$NUM"
			INPUTARG="/usr/lib/input_uvc.so -d $d $VIDARGS"
			OUTPUTARG="/usr/lib/output_http.so -p $PORT"
			LOG="/var/log/mjpg_streamer$NUM.log"
			PID=`ps -C mjpg_streamer --no-headers -o pid,args | grep $d | head -1 | awk '{print $1}'`
			if [ -z "$PID" ]; then
				$DAEMON -i "$INPUTARG" -o "$OUTPUTARG" > $LOG 2>&1 &
				PID=$!
				echo "New mjpg_streamer for $d with PID $PID"
			fi
			PIDS="$PID $PIDS"
		done

		while [ 1 ]; do
			EVERYBODYONLINE=1
			for p in $PIDS;
			do
				CHECK=`ps --pid $p --no-headers | awk '{print $4}'`
				if [ "$CHECK" != "mjpg_streamer" ]; then
					echo "Dead mjpg_streamer with PID $PID"
					EVERYBODYONLINE=0
				fi
			done
			if [ $EVERYBODYONLINE -ne 1 ]; then
				break
			fi
			sleep 5
		done
	done
else
	while [ 1 ]; do
		DEVICES=`ls -1 /dev/video?`
		DEVLIST=""
		PID=""
		for d in $DEVICES;
		do
			if [ -z "$DEVLIST" ]; then
				DEVLIST="$d"
			else
				DEVLIST="$DEVLIST,$d"
			fi
		done
		INPUTARG="/usr/lib/input_uvc.so -d $DEVLIST $VIDARGS -p 3001"
		OUTPUTARG="/usr/lib/output_http.so -p 8090"
		LOG="/var/log/mjpg_streamer.log"
		$DAEMON -i "$INPUTARG" -o "$OUTPUTARG" > $LOG 2>&1 &
		PID=$!
		echo "New mjpg_streamer for $DEVLIST with PID $PID"

		while [ 1 ]; do
			CHECK=`ps --pid $PID --no-headers | awk '{print $4}'`
			if [ "$CHECK" != "mjpg_streamer" ]; then
				echo "Dead mjpg_streamer with PID $PID"
				break
			fi
			sleep 5
		done
	done
fi
